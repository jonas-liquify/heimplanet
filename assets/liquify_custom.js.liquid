document.addEventListener('alpine:init', () => {
    Alpine.data('handleVariant', (pProduct = null, optionsByName = null, selectedOrFirstAvailable = null) => ({
        bundle: {},
        globalBundle: [],
        product: pProduct,
        options_by_name: optionsByName,
        options: pProduct?.options,
        variants: pProduct?.variants,
        selected_or_first_available_variant: selectedOrFirstAvailable,
        variantImage: selectedOrFirstAvailable?.featured_image?.src,
        selected_product_id: selectedOrFirstAvailable?.id,
        _price: selectedOrFirstAvailable?.price ?? 0,
        quantity: 1,
        addToCartButton: true,
        firstOptionHasAvailableChildren: {},
        selectorType: 'radio',
        formSelector: "#product_form_" + pProduct.id,
        isMainProduct: false,

        // Use init for debugging
        init() {
            const productId = document.querySelector('#shopify-section-product_hero [li-element="product-variant-container"][data-productid]')?.getAttribute('data-productid');
            this.isMainProduct = parseInt(productId) === parseInt(pProduct.id);
            //     console.log('Shopify', Shopify)
            //     console.log('product', this.product)
            //     console.log('options_by_name', this.options_by_name)
            //     console.log('selected_or_first_available_variant', this.selected_or_first_available_variant)

            this.loadGlobalBundle();
        },

        qs(selector) {
            return document.querySelector(selector)
        },

        set price(value) {
            if (isNaN(value)) {
                throw new Error('price have to be a number');
            }
            this._price = value;
        },

        get price() {
            const price = new Intl.NumberFormat(Shopify.locale + '-' + Shopify.country, {
                style: 'currency',
                currency: Shopify.currency.active,
            });
            return price.format(this._price / 100 ?? 0);
        },

        observeVariants() {
            if(this.isMainProduct) {
                // todo: maybe via $dispatch or helper?!
                let $this = this;
                window.onpopstate = function(event) {

                    const urlParams = new URLSearchParams(window.location.search);
                    const variantId = urlParams.get('variant');
                    const observer = new MutationObserver(mutationCallback);
                    //fixme: maybe in helper?!
                    function mutationCallback(mutations) {
                        mutations.forEach(function(mutation) {
                            if (mutation.type === "attributes" && (mutation.attributeName === "checked" || mutation.attributeName === "selected")) {
                                // fixme: kann/muss theoretisch weg, da über :class gelöst werden muss
                                mutation.target.previousElementSibling.classList.remove('w--redirected-checked', 'w--redirected-focus')
                                if(mutation?.target?.checked || mutation?.target?.selected) {
                                    mutation.target.previousElementSibling.classList.add('w--redirected-checked', 'w--redirected-focus')
                                    $this.setVariant(false)
                                }
                            }
                        })
                        observer.disconnect()
                    }

                    selectedOrFirstAvailable = $this?.variants.filter(variant => parseInt(variant.id) === parseInt(variantId))[0]

                    $this.selected_or_first_available_variant = selectedOrFirstAvailable;

                    $this.options.forEach(function (option) {
                        let selector = $this.formSelector + " [data-productVariantsLoop] input[name='" + option + "']"
                        if($this.selectorType === 'select') {
                            selector = $this.formSelector + " [data-productVariantsLoop] select[name='" + option + "'] option"
                        }
                        document.querySelectorAll(selector).values().forEach(function(element) {
                            observer.observe(element, {
                                attributes: true
                            });
                        })
                    })
                }
            }
        },

        updateVariantStatuses() {
            const selectedOptionOneVariants = this.variants.filter((variant) => {
                    let querySelector = this.formSelector + ' [data-productVariantsLoop] input[type="radio"]:checked'
                    if (this.selectorType === 'select') {
                        querySelector = this.formSelector + ' [data-productVariantsLoop] select'
                    }
                    return document.querySelector(querySelector)?.value === variant.option1
                }
            );

            const inputWrappers = [...document.querySelectorAll(this.formSelector + ' [data-ProductVariantsLoop]')];

            inputWrappers.forEach((option, index) => {
                if (index === 0) return;
                let optionInputs = [...option.querySelectorAll('input[type="radio"]')];
                if (this.selectorType === 'select') {
                    optionInputs = [...option.querySelectorAll('option')];
                }
                const previousOptionSelected = inputWrappers[index - 1].querySelector(':checked').value;
                const availableOptionInputsValue = selectedOptionOneVariants
                    .filter((variant) => variant.available && variant[`option${index}`] === previousOptionSelected)
                    .map((variantOption) => variantOption[`option${index + 1}`]);
                this.setInputAvailability(optionInputs, availableOptionInputsValue);

            });
        },

        setInputAvailability(listOfOptions, listOfAvailableOptions) {
            listOfOptions.forEach((input) => {
                if (listOfAvailableOptions.includes(input.getAttribute('value'))) {
                    input.classList.remove('data-disabled');
                    input.removeAttribute('data-disabled');

                } else {
                    input.classList.add('data-disabled');
                    input.setAttribute('data-disabled', '');
                }
            });

        },

        /**
         * Called by x-init.
         *
         * @see ProductVariationsContainer
         */
        activateVariants() {
            this.observeVariants();

            this.selectorType = document.querySelector('[data-selectorType]')?.dataset?.selectortype ?? this.selectorType

            this.variants.map((variant) => {
                if (this.firstOptionHasAvailableChildren[variant?.option1] === undefined) {
                    this.firstOptionHasAvailableChildren[variant?.option1] = 0;
                }
                this.firstOptionHasAvailableChildren[variant?.option1] += variant?.available;
            });

            const option1 = this.getVariantElement(this.options?.[0]);
            const option2 = this.getVariantElement(this.options?.[1]);
            const option3 = this.getVariantElement(this.options?.[2]);
            if (option1) {
                this.activateVariant(option1)
            }
            if (option2) {
                this.activateVariant(option2)
            }
            if (option3) {
                this.activateVariant(option3)
            }
            this.updateVariantStatuses()

            // @todo: Replace with CSS
            const css = ' [data-ProductVariantsLoop] input[type=radio].data-disabled + span{ ' +
                ' text-decoration: line-through; ' +
                ' opacity: .5; ' +
                ' } ' +
                ' .button.max-width-full.w-button:data-disabled, ' +
                ' .button.max-width-full.w-button[data-disabled] { ' +
                '  cursor: not-allowed; ' +
                ' }';
            const style = document.createElement("style")
            const head = document.getElementsByTagName('head')[0]
            head.appendChild(style)
            style.appendChild(document.createTextNode(css));
        },

        activateVariant(element) {
            element.previousElementSibling.classList.add('w--redirected-checked')
        },

        /**
         * Holt aus der übergebenen Optionsgruppe den Wert des selektierten Redio-Buttons
         */
        checkedVariantValue(optionName) {
            return this.getVariantElement(optionName)?.value;
        },

        /**
         * Holt aus der übergebenen Optionsgruppe das selektierte Element
         */
        getVariantElement(optionName) {
            let selector = this.formSelector + " [data-productVariantsLoop] input[name='" + optionName + "']:checked"
            if (this.selectorType === 'select') {
                selector = this.formSelector + " [data-productVariantsLoop] select[name='" + optionName + "'] option:checked"
                if (this.qs(selector)['data-disabled'] ?? false) {
                    selector = this.formSelector + " [data-productVariantsLoop] select[name='" + optionName + "'] option:not([data-disabled])"
                }
            }
            return this.qs(selector) ? this.qs(selector) : '';
        },

        filterVariants() {
            const option1 = this.checkedVariantValue(this.options?.[0]);
            const option2 = this.checkedVariantValue(this.options?.[1]);
            const option3 = this.checkedVariantValue(this.options?.[2]);

            let selectedOptions = [
                option1,
                option2,
                option3,
            ];
            selectedOptions = (selectedOptions.filter(i => i)).join('-')

            let possibleProducts = []
            for (const variant of this.variants) {
                let variantString = [
                    option1 ? variant?.option1 : undefined,
                    option2 ? variant?.option2 : undefined,
                    option3 ? variant?.option3 : undefined,
                ];
                variantString = (variantString.filter(i => i)).join('-')

                if (selectedOptions === variantString) {
                    possibleProducts.push(variant)
                }
            }

            return possibleProducts;
        },

        /**
         * Workaround function that works same as filterVariants but only applies two selected options.
         * todo: Refactoring.
         */
        filterNextAvailableVariant() {
            const option1 = this.checkedVariantValue(this.options?.[0]);
            const option2 = this.checkedVariantValue(this.options?.[1]);

            let selectedOptions = [
                option1,
                option2,
            ];
            selectedOptions = (selectedOptions.filter(i => i)).join('-')

            let possibleProducts = []
            for (const variant of this.variants) {
                let variantString = [
                    option1 ? variant?.option1 : undefined,
                    option2 ? variant?.option2 : undefined,
                ];
                variantString = (variantString.filter(i => i)).join('-')

                if (selectedOptions === variantString) {
                    possibleProducts.push(variant)
                }
            }

            return possibleProducts;
        },

        setUrlParam() {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('variant', this.selected_product_id);

            window.history.pushState({ ...window.history.state}, '', '?' + urlParams.toString());
        },

        findAvailableVariant() {
            const matchedProducts = this.filterVariants()

            if (matchedProducts.length < 1) {
                console.log('Keine eindeutige Variante', matchedProducts)

                // Workaround: Try to find the next best available option (fewer filters).
                const nextAvailableVariant = this.filterNextAvailableVariant()
                console.log('nextAvailableVariant', nextAvailableVariant)

                if (nextAvailableVariant.length > 0) {
                    const nextAvailable = nextAvailableVariant.filter(variant => variant.available)
                    // We settled on the first available Variant to be selected.
                    return nextAvailable[0]
                }

                console.log('no next best option found')

                return undefined
            }

            return matchedProducts[0]
        },

        setVariant(pushState = true) {
            const product = this.findAvailableVariant()

            if (! product) {
                console.log("no product found to set active")

                return
            }

            console.log('set active variant', product)

            this.addToCartButton = true

            this.selected_product_id = product.id
            this.variantImage = product?.featured_image?.src
            this.price = product?.price;
            this.selected_or_first_available_variant = product;

            // nur für die Detailseiten
            if (pushState && this.isMainProduct) {
                this.setUrlParam()
            }

            this.updateVariantStatuses()
        },

        getAddToCartBody(products) {
            return JSON.stringify({
                'items': products.map(product => ({
                    id: product.id,
                    quantity: product.quantity ?? 1,
                }))
            });
        },

        callAddToCartApi(body) {
            return fetch(window.Shopify.routes.root + 'cart/add.js', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: body
            })
        },

        getGlobalBundleCartBody() {
            let globalBundle = this.getGlobalBundleFromLocalStorage();

            return JSON.stringify({
                'items': globalBundle.map(item => ({
                        id: item.product.id,
                        quantity: item.quantity,
                        properties: {
                            'bundle': this.bundleName,
                        }
                    }))
                })
        },

        async addGlobalBundleToCart() {
            const body = this.getGlobalBundleCartBody()

            await this.callAddToCartApi(body)
                .then(response => {
                    let data = response.json();

                    this.clearGlobalBundle();
                    this.triggerMinicartToggle()

                    this.$dispatch('cartupdated');
                    this.$dispatch('toggleminicart');
                    this.$dispatch('showcartmessage', {
                        status: data.status,
                        message: data.message,
                        description: data.description
                    });
                });
        },

        clearGlobalBundle() {
            this.updateBundleObject([]);
        },

        /**
         * Adds a new product to the globalBundle.
         * If the product is already in the bundle, increase the quantity by 1.
         */
        addToGlobalBundle() {
            console.log('addToGlobalBundle()');

            this.addOrIncreaseGlobalBundleItem(
                this.getNewGlobalBundleItem()
            );
        },

        getNewGlobalBundleItem(productId = undefined, quantity = 1) {
            let product = this.variants.find(variant => variant.id === productId) ?? this.selected_or_first_available_variant;
            return {
                product: Object.assign({}, product),
                quantity: quantity,
            }
        },

        /**
         * If the product is already in the bundle, increase the quantity by 1.
         */
        addOrIncreaseGlobalBundleItem(item) {
            let globalBundle = this.getGlobalBundleFromLocalStorage();
            let existingItem = globalBundle.find(bundleItem => bundleItem.product.id === item.product.id);

            if (existingItem) {
                let quantity = parseInt(existingItem.quantity);
                quantity += item.quantity;
                existingItem.quantity = quantity;
            } else {
                globalBundle.push(item);
            }

            this.updateBundleObject(globalBundle);
        },

        /**
         * Update the Alpine globalBundle object and save it to local storage.
         */
        updateBundleObject(globalBundle) {
            this.globalBundle = globalBundle;
            localStorage.setItem('globalBundle', JSON.stringify(globalBundle));
        },

        /**
         * One method to handle the various ways to update a bundle item.
         *
         * @see ProductVariationsContainer
         */
        updateBundleItem(productId, quantity) {
            this.loadGlobalBundle();

            if (quantity === 0) {
                this.removeProductFromGlobalBundle(productId);
                return;
            }

            if (quantity === '-1') {
                this.decrementQuantityOfBundleItem(productId);
                return;
            }

            if (quantity === '+1') {
                this.incrementQuantityOfBundleItem(productId);
                return;
            }

            this.updateQuantityOfBundleItem(productId, quantity);
        },

        updateQuantityOfBundleItem(productId, quantity) {
            let bundle = this.getGlobalBundleFromLocalStorage();
            let item = bundle.find(item => item.product.id === productId);
            item.quantity = quantity;

            this.updateBundleObject(bundle);
        },

        decrementQuantityOfBundleItem(productId) {
            let bundle = this.getGlobalBundleFromLocalStorage();
            let item = bundle.find(item => item.product.id === productId);

            if (item.quantity === 1) {
                this.removeProductFromGlobalBundle(productId);

                return;
            }

            item.quantity -= 1;

            this.updateBundleObject(bundle);
        },

        incrementQuantityOfBundleItem(productId) {
            let bundle = this.getGlobalBundleFromLocalStorage();
            let item = bundle.find(item => item.product.id === productId);
            let quantity = parseInt(item.quantity)
            quantity += 1;
            item.quantity = quantity;
            this.updateBundleObject(bundle);
        },

        /**
         * Removes a product from the globalBundle.
         */
        removeProductFromGlobalBundle(productId) {
            let id = productId ?? this.selected_or_first_available_variant.id;
            let bundle = this.getGlobalBundleFromLocalStorage();
            bundle = bundle.filter(item => item.product.id !== id);

            this.updateBundleObject(bundle);
        },

        /**
         * Get the globalBundle from local storage and set it to the globalBundle property.
         */
        loadGlobalBundle() {
            this.getBundleName();
            this.globalBundle = this.getGlobalBundleFromLocalStorage();
        },

        getGlobalBundleFromLocalStorage() {
            return JSON.parse(localStorage.getItem('globalBundle')) ?? [];
        },

        getBundleName() {
            this.bundleName = document
                                .querySelector('[data-bundleName]')
                                .querySelector('*')
                                .textContent
                                .trim() ?? 'Bundle'

            return this.bundleName;
        },

        /**
         * Add all products to cart.
         */
        async addToCartWithBundle() {
            console.log('addToCartWithBundle() called!');

            // Map all bundle products
            const products = Object.entries(this.bundle).map(([key, value]) => ({
                id: value,
                quantity: 1
            }))

            // Add selected product
            products.push({
                id: this.selected_product_id ?? this.selected_or_first_available_variant?.id,
                quantity: this.quantity ?? 1,
            })

            // Create body with all products
            let body = this.getAddToCartBody(products);

            // Single API call for all products
            try {
                let response = await this.callAddToCartApi(body);
                let data = await response.json();
                console.log('Items added (addToCartWithBundle()):', data.items);
                this.products = data.items;

                this.triggerMinicartToggle()

                console.log('All items added!');
                this.$dispatch('cartupdated');
                this.$dispatch('toggleminicart');
                this.$dispatch('showcartmessage', {
                    status: data.status,
                    message: data.message,
                    description: data.description
                });
            } catch (error) {
                console.error('Error in add to cart with bundle:', error);
                this.$dispatch('showcartmessage', {
                    status: error.status,
                    message: error.message,
                    description: error.description
                });
            }
        },

        /**
         * Add a single product to cart.
         */
        async addToCart(productId = undefined, quantity = undefined) {
            console.log('add to cart called, available:', this.selected_or_first_available_variant.available);

            if(!this.selected_or_first_available_variant.available) {
                return
            }

            let body = JSON.stringify({
                'items': [
                    {
                        id: productId ?? this.selectedProductId ?? this.selected_or_first_available_variant?.id,
                        quantity: quantity ?? this.quantity ?? 1,
                    }
                ]
            });

            await fetch(window.Shopify.routes.root + 'cart/add.js', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: body
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Item (addToCart()): ', data, data.items);
                    this.products = data.items;

                    console.log('product added');
                    console.log('Dispatch cart events');
                    this.$dispatch('cartupdated');
                    this.$dispatch('toggleminicart');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('addToCart error:', error);
                    this.$dispatch('showcartmessage', { status: error.status, message: error.message, description: error.description });
                });
        },

        /**
         * Trigger dropdown click to open minicart.
         */
        triggerMinicartToggle() {
            let elements = document.querySelectorAll('[li-element="mini-cart-toggle"]');
            elements.forEach(element => {
                let closestDropdown = element.closest('.w-dropdown-toggle');
                if (closestDropdown) {
                    LiquifyHelper.triggerClick(closestDropdown);
                }
            });
        },

        /**
         * Add a single product to cart and redirect to checkout.
         */
        async addToCartAndCheckout(productId = undefined, quantity = undefined) {
            await this.addToCart(productId, quantity)
                .then(() => {
                    window.location.href = '/checkout';
                });
        },

        /**
         * Format monetary values.
         */
        moneyFormat(value, minor = true) {
            return LiquifyHelper.moneyFormat(value, minor)
        },
    }));
})
